#include <iostream>
using namespace std;

#define MAX 100

int heap[MAX];  // heap array
int size = 0;   // current size of heap

// Function to heapify up (after insertion)
void heapifyUp(int index) {
    while (index > 0 && heap[(index - 1) / 2] < heap[index]) {
        swap(heap[index], heap[(index - 1) / 2]);
        index = (index - 1) / 2;
    }
}

// Function to heapify down (after extract)
void heapifyDown(int index) {
    int largest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < size && heap[left] > heap[largest])
        largest = left;
    if (right < size && heap[right] > heap[largest])
        largest = right;

    if (largest != index) {
        swap(heap[index], heap[largest]);
        heapifyDown(largest);
    }
}

// Insert into Priority Queue
void insert(int value) {
    if (size >= MAX) {
        cout << "Overflow! Heap is full." << endl;
        return;
    }
    heap[size] = value;
    heapifyUp(size);
    size++;
}

// Get max element (peek)
int getMax() {
    if (size == 0) {
        cout << "Heap is empty!" << endl;
        return -1;
    }
    return heap[0];
}

// Extract max (remove and return root)
int extractMax() {
    if (size == 0) {
        cout << "Heap is empty!" << endl;
        return -1;
    }
    int maxValue = heap[0];
    heap[0] = heap[size - 1];
    size--;
    heapifyDown(0);
    return maxValue;
}

// Display the heap
void display() {
    cout << "Priority Queue (Heap): ";
    for (int i = 0; i < size; i++)
        cout << heap[i] << " ";
    cout << endl;
}

// Sort all elements (like Heap Sort)
void heapSortDescending() {
    cout << "Heap Sort (Descending Order): ";
    while (size > 0) {
        cout << extractMax() << " ";
    }
    cout << endl;
}

// Main function
int main() {
    int arr[] = {82, 90, 10, 12, 15, 77, 55, 23};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; i++) {
        insert(arr[i]);
    }

    display();

    heapSortDescending(); // Priority Queue effect with Heap Sort

    return 0;
}
